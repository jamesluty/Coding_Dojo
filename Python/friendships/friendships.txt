SELECT * FROM users;

-- Create 6 new users
INSERT INTO users (first_name, last_name) 
VALUES ('James', 'Luty'),
('Darth', 'Vader'),
('Obi', 'Wan'),
('Luke', 'Skywalker'),
('Master', 'Yoda'),
('Han', 'Solo');

SELECT * FROM friendships;

-- Have user 1 be friends with user 2, 4 and 6
INSERT INTO friendships (user_id, friend_id)
VALUE (1, 2), (1, 4), (1, 6);

-- Have user 2 be friends with user 1, 3 and 6
INSERT INTO friendships (user_id, friend_id)
VALUE (2, 1), (2, 3), (2, 5);

-- Have user 3 be friends with user 2 and 5
INSERT INTO friendships (user_id, friend_id)
VALUE (3, 2), (3, 5);

-- Have user 4 be friends with user 3
INSERT INTO friendships (user_id, friend_id)
VALUE (4, 3);

-- Have user 5 be friends with user 1 and 6
INSERT INTO friendships (user_id, friend_id)
VALUE (5, 1), (5, 6);

-- Have user 6 be friends with user 2 and 3
INSERT INTO friendships (user_id, friend_id)
VALUE (6, 2), (6, 3);

-- Display the relationships, create as shown in the above image
SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name  
FROM users
JOIN friendships ON friendships.user_id = users.id
LEFT JOIN users as users2 ON users2.id = friendships.friend_id;

-- Return all user who are friends with the first user, make sure theirs names are displayed in results
SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name  
FROM users
JOIN friendships ON friendships.user_id = users.id
LEFT JOIN users as users2 ON users2.id = friendships.friend_id WHERE users.id = 1;

-- Count all friendships
SELECT users.first_name, users.last_name, COUNT(*) AS friend_count
FROM users
JOIN friendships ON users.id = friendships.user_id
GROUP BY users.id;

-- Find out whoe has the most friends and return the count of their friends
SELECT users.first_name, users.last_name, COUNT(*) AS friend_count
FROM users
JOIN friendships ON users.id = friendships.user_id
GROUP BY users.id
ORDER BY friend_count DESC LIMIT 1;

-- Return the friends of the third user in alphabetical order
SELECT users.first_name, users.last_name, users2.first_name, users2.last_name
FROM users
JOIN friendships ON friendships.user_id = users.id
LEFT JOIN users as users2 ON users2.id = friendships.friend_id
WHERE users.id = 3
ORDER BY users.last_name DESC;